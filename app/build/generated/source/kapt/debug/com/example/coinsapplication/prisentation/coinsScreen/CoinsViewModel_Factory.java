// Generated by Dagger (https://dagger.dev).
package com.example.coinsapplication.prisentation.coinsScreen;

import com.example.coinsapplication.domain.useCase.getCoinsUseCase.CoinsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoinsViewModel_Factory implements Factory<CoinsViewModel> {
  private final Provider<CoinsUseCase> coinsUseCaseProvider;

  public CoinsViewModel_Factory(Provider<CoinsUseCase> coinsUseCaseProvider) {
    this.coinsUseCaseProvider = coinsUseCaseProvider;
  }

  @Override
  public CoinsViewModel get() {
    return newInstance(coinsUseCaseProvider.get());
  }

  public static CoinsViewModel_Factory create(Provider<CoinsUseCase> coinsUseCaseProvider) {
    return new CoinsViewModel_Factory(coinsUseCaseProvider);
  }

  public static CoinsViewModel newInstance(CoinsUseCase coinsUseCase) {
    return new CoinsViewModel(coinsUseCase);
  }
}
