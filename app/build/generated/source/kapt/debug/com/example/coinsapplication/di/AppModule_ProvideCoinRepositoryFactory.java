// Generated by Dagger (https://dagger.dev).
package com.example.coinsapplication.di;

import com.example.coinsapplication.data.CoinApi;
import com.example.coinsapplication.domain.repository.CoinRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideCoinRepositoryFactory implements Factory<CoinRepository> {
  private final Provider<CoinApi> coinApiProvider;

  public AppModule_ProvideCoinRepositoryFactory(Provider<CoinApi> coinApiProvider) {
    this.coinApiProvider = coinApiProvider;
  }

  @Override
  public CoinRepository get() {
    return provideCoinRepository(coinApiProvider.get());
  }

  public static AppModule_ProvideCoinRepositoryFactory create(Provider<CoinApi> coinApiProvider) {
    return new AppModule_ProvideCoinRepositoryFactory(coinApiProvider);
  }

  public static CoinRepository provideCoinRepository(CoinApi coinApi) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideCoinRepository(coinApi));
  }
}
